
@{
    ViewBag.Title = "Thông tin người dùng";
    ViewBag.Menu = "user-info";
}

@section styles{
    <style>
        section{
            flex-direction:column;
        }

        .verify-email-code i{
            color: green;
            background: none;
            border: none;
        }

        .verify-phone-code i {
            color: green;
            background: none;
            border: none;
        }

    </style>
}

<section class="account-page">
    <div class="section-header">Tài khoản</div>

    <div class="user-info" id="user-info">
        <div class="user-avatar">
            <div class="user-avt preview" onclick="ChooseThumbnail(this);"></div>
            <input type="file" style="display:none;" onchange="ChooseThumbnail_OnChange(this);" required />
            <input type="hidden" id="Thumbnail" />
        </div>
        <div class="info-detail">
            <div class="form-group">
                <label for="Account">Tài khoản</label>
                <input type="text" class="form-control" id="Account" placeholder="Tài khoản">
            </div>

            <div class="form-group">
                <label for="Email">Email</label>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="Email" placeholder="Email">
                    <button class="input-group-text" onclick="GetEmailCode();" id="Code">Nhận mã <br> xác thực</button>
                </div>
            </div>
            <div class="form-group">
                <div class="d-flex mb-3">
                    <input type="text" style="width:50%;" class="form-control" id="EmailCode" placeholder="Mã xác thực">
                    <button class="input-group-text verify-email-code" style="margin-left: 10px;" onclick="VerifyEmailCode();" id="Code">Xác minh</button>
                </div>
            </div>

            <div class="form-group">
                <label for="Phone">Điện thoại</label>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="Phone" placeholder="Số điện thoại">
                    <button class="input-group-text" onclick="GetPhoneCode();" id="Code">Nhận mã <br> xác thực</button>
                </div>
            </div>
            <div class="form-group">
                <div class="d-flex mb-3">
                    <input type="text" style="width:50%;" class="form-control" id="PhoneCode" placeholder="Mã xác thực">
                    <button class="input-group-text verify-phone-code" style="margin-left: 10px;" onclick="VerifyPhoneCode();" id="Code">Xác minh</button>
                </div>
            </div>

            <div class="confirm-button" style="text-align:right;margin-top:20px;">
                <button class="btn btn-primary btn-sm" onclick="updateInfoUser();">Cập nhật</button>
            </div>
        </div>
    </div>

    <div class="user-password">
        <div class="form-group">
            <label for="oldPassword">Mật khẩu cũ</label>
            <input type="password" style="font-size:14px;" class="form-control" id="oldPassword" placeholder="Nhập mật khẩu cũ">
        </div>
        <div class="form-group">
            <label for="newPassword">Mật khẩu mới</label>
            <input type="password" style="font-size:14px;" class="form-control" id="newPassword" placeholder="Nhập mật khẩu mới">
        </div>
        <div class="form-group">
            <label for="confirmPassword">Xác nhận mật khẩu</label>
            <input type="password" style="font-size:14px;" class="form-control" id="confirmPassword" placeholder="Nhập lại mật khẩu">
            <span id='message'></span>
        </div>
        <div class="confirm-button" style="text-align:right;margin-top:20px;">
            <button class="btn btn-primary btn-sm" onclick="ChangePassword();">Cập nhật</button>
        </div>
    </div>
</section>

@section scripts{
    <script src="~/Content/js/base64.js"></script>
    <script>
        var ChooseThumbnail = function (el) { $(el).closest('.user-avatar').find('input[type=file]').click(); }
        var ChooseThumbnail_OnChange = function (el) {
            let reader = new FileReader();
            reader.onloadend = function (e) {
                $(el).closest('.user-avatar').find('input[type=hidden]').val(e.currentTarget.result.substring(e.currentTarget.result.indexOf(',') + 1, e.currentTarget.result.length));
                $(el).closest('.user-avatar').find('.preview').css('background-image', `url(${e.currentTarget.result})`);
            }
            reader.readAsDataURL(el.files[0])
        }

        $('#newPassword, #confirmPassword').on('keyup', function () {
            if ($('#newPassword').val() == $('#confirmPassword').val()) {
                $('#message').html('Xác nhận mật khẩu đã khớp').css('color', 'green');
            } else
                $('#message').html('Xác nhận mật khẩu chưa khớp').css('color', 'red');
        });

        const getUserInfo = async function () {
            let rq = await fetch(Enum.ApiUrl + '/api/User/GetInforUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rq.json();

            if (CheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                console.log(rs.data);
                rs.data.Phone = '0' + rs.data.Phone.substring(4);
                $('.preview').css('background-image', `url(${rs.data.Avatar})`)
                $('#Account').val(rs.data.Account);
                $('#Email').val(rs.data.Email);
                $('#Phone').val(rs.data.Phone);
            }
        }

        const GetEmailCode = async function () {
            let email = $('#Email').val();

            if (email === '' || email === null || typeof email === 'undefined') {
                Swal.fire({
                    icon: "error",
                    title: "Email không được để trống",
                })
                return;
            }
            if (!validateEmail(email)) {
                Swal.fire({
                    icon: "error",
                    title: "Email không đúng định dạng",
                })
                return;
            }           
            let rq = await fetch('/api/user/GetVerifyCodeEmail?email=' + email, {
                method: 'get',
                headers: {
                    "Content-Type": "application/json",
                }
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
            /*if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {                
            }*/
        }

        const VerifyEmailCode = async function () {
            let emailCode = $('#EmailCode').val();
            let email = $('#Email').val();
            if (emailCode === '' || emailCode === null || typeof emailCode === 'undefined') {
                Swal.fire({
                    icon: "error",
                    title: "Mã xác nhận không được để trống",
                })
                return;
            }
            if (email === '' || email === null || typeof email === 'undefined') {
                Swal.fire({
                    icon: "error",
                    title: "Email không được để trống",
                })
                return;
            }
            let rq = await fetch('/api/user/ConfirmEmailCode?email=' + email + '&code=' + emailCode, {
                method: 'get',
                headers: {
                    "Content-Type": "application/json",
                }
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.verify-email-code').html('');                
                $('.verify-email-code').append('<i class="fas fa-check"></i>');
            }
        } 

        const GetPhoneCode = async function () {
            let phone = $('#Phone').val();

            if (phone === '' || phone === null || typeof phone === 'undefined') {
                Swal.fire({
                    icon: "error",
                    title: "Số điện thoại không được để trống",
                })
                return;
            }
            if (phone.length !== 10 && phone[0] !== '') {
                Swal.fire({
                    icon: "error",
                    title: "Số điện thoại không đúng định dạng",
                })
                return;
            }

            phone = '%2B84%20' + phone.substr(1, 9);
            let rq = await fetch('/api/user/GetVerifyCode?phone=' + phone, {
                method: 'get',
                headers: {
                    "Content-Type": "application/json",
                }
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
        }

        const VerifyPhoneCode = async function () {
            let phoneCode = $('#PhoneCode').val();
            let phone = $('#Phone').val();
            phone = '%2B84%20' + phone.substr(1, 9);
            if (phoneCode === '' || phoneCode === null || typeof phoneCode === 'undefined') {
                Swal.fire({
                    icon: "error",
                    title: "Mã xác nhận không được để trống",
                })
                return;
            }

            if (phone === '' || phone === null || typeof phone === 'undefined') {
                Swal.fire({
                    icon: "error",
                    title: "Số điện thoại không được để trống",
                })
                return;
            }
            let rq = await fetch('/api/user/ConfirmCode?phone=' + phone + '&code=' + phoneCode, {
                method: 'get',
                headers: {
                    "Content-Type": "application/json",
                }
            });
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('.verify-phone-code').html('');
                $('.verify-phone-code').append('<i class="fas fa-check"></i>');
            }
        }

        const updateInfoUser = async function () {

            let model = {
                Avatar: $('#Thumbnail').val(),
                Account: $('#Account').val(),
                Email: $('#Email').val(),
                EmailCode: $('#EmailCode').val(),
                Phone: $('#Phone').val(),
                PhoneCode: $('#PhoneCode').val()
            }

            let accountProcess = RemoveVietnameseTones(model.Account);
            accountProcess = accountProcess.replace(/[^a-z,^A-Z,^0-9]/g, '');
            if (accountProcess !== model.Account) {
                Swal.fire({
                    icon: "error",
                    title: "Tên đăng nhập không được có kí tự đặc biệt, khoảng trắng",
                });
                return;
            }

            model.Phone = '+84 ' + model.Phone.substr(1, 9);

            let rq = await fetch(Enum.ApiUrl + '/api/User/UpdateInfoUser', {
                method: 'post',
                headers: Enum.OptionHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rq.json();

            if (CheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                Swal.fire({
                    icon: "success",
                    title: "Đã cập nhật thành công",
                    preConfirm: function () { window.location.reload() },
                })
            }
        }

        const ChangePassword = async function () {
            let userData = (GetCookie('UserToken'));
            let model = {
                Password: $('#oldPassword').val(),
                NewPassword: $('#newPassword').val()
            }
            model.Password = MD5(base64.encode(model.Password));
            model.NewPassword = MD5(base64.encode(model.NewPassword));
            let rq = await fetch(Enum.ApiUrl + '/api/User/ChangePassword', {
                method: 'post',
                headers: Enum.OptionHeaderDefault,
                body: JSON.stringify(model)
            });

            let rs = await rq.json();

            if (CheckErrorResponse(rs) === false) return;

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                Swal.fire({
                    icon: "success",
                    title: "Đã cập nhật mật khẩu thành công",
                    preConfirm: function () { window.location.reload() },
                })
            }
        }

        function validateEmail($email) {
            var emailReg = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;
            return emailReg.test($email);
        }


        const initPage = function () {
            getUserInfo();
        }
        initPage();
    </script>
}