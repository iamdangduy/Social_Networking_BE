
@{
    ViewBag.Title = "Ví";
    ViewBag.Menu = "user";
    ViewBag.SubMenu = "wallet";
}

@section styles {
    <style>
        section {
            flex-direction: column;
        }

        .wallet-page ul li {
            width: 50%;
            text-align: center;
        }

        .card .card-body {
            padding: 1rem;
        }

        .modal {
            position: fixed;
            top: 0;
            right: 0;
            left: 0;
            bottom: 0;
            background: rgba(0,0,0,0.4);
            display: none;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .modal-container {
            background-color: #fff;
            width: 900px;
            max-width: calc(100% - 32px);
            position: relative;
            animation: modalFadeIn ease 0.5s;
            transition: top 0.4s, opacity 0.4s;
        }

        .modal-header {
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center !important;
            font-size: 20px;
            border-bottom: solid #ccc 0.5px;
            text-transform: uppercase;
        }

        .modal-body {
            width: 90%;
            margin: auto;
        }

        .modal-footer {
            width: 90%;
            margin: auto;
            justify-content: end;
            display: flex;
            gap: 10px;
            padding-bottom: 10px;
        }

            .modal-footer .close-modal {
                width: 65px;
                color: black;
                border: solid #ccc 0.5px;
                cursor: pointer;
                border-radius: 5px;
            }

        .products .product-detail {
            display: flex;
            gap: 10px;
            padding: 5px 10px;
            width: 100px;
            flex-direction: column;
            align-items: center;
            border: 0.5px solid #c4c4c4;
            border-radius: 7px;
        }
            .products .product-detail.selected {
                background-color: azure;
            }

        .products .product-detail .product-img {
            width: 30px;
            height: 30px;
        }

        .products .product-detail .product-img .thumbnail{
            height: 0;
            width: 100%;
            padding-bottom: 100%;
            border-radius: 100%;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            border: .5px solid #d7d7d7;
        }

        .products .product-detail .product-name{
            flex: 1;
            display: flex;
            align-items: center;
            font-size:14px;
        }


        @@keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-200px);
            }

            to {
                transform: translateY(0px);
                opacity: 1;
            }
        }

        .modal-body ul {
            position: absolute;
            background-color: #fff;
            border: 0.5px solid #2222;
            width: 100%;
            max-height: 150px;
            overflow: auto;
            display: none;
        }

        .modal-body ul li{
            text-align: left;
            width: 100%;
            padding: 5px 10px;
        }

        .modal-body ul li:hover{
            background-color: #ccc;            
        }

        .modal-body ul li .user-receive{
            font-size: 15px;

        }

        .modal-body ul li .user-content{
            font-size: 12px;
        }
    </style>
}

<section class="wallet-page">
    <div class="section-header">Ví</div>
    <div class="card">
        <div class="card-body">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link active" id="balance-tab" data-bs-toggle="tab" href="#balance"
                       role="tab" aria-controls="balance" aria-selected="true">Số dư</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link" id="pin-tab" data-bs-toggle="tab" href="#pin"
                       role="tab" aria-controls="profile" aria-selected="false">Vé</a>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="balance" role="tabpanel"
                     aria-labelledby="balance-tab">
                    <div class="balance-header">
                        <div class="wallet-balance" id="wallet-balance"> 12,000,000 VNĐ</div>
                        <div class="withdraw-button" style="text-align:right">
                            <button class="btn btn-sm rounded-pill btn-primary" style="padding:3px 15px;" onclick="openModal()"> Rút </button>
                        </div>
                    </div>
                    <div class="withdraw" id="withdraw-pending">
                    </div>
                    <div class="history" id="history-balance">
                    </div>
                </div>
                <div class="tab-pane fade" id="pin" role="tabpanel"
                     aria-labelledby="pin-tab">
                    <div class="balance-header">
                        <div class="wallet-balance" id="wallet-pin"> 3 Vé</div>
                        <div class="withdraw-button" style="text-align:right">
                            <button class="btn btn-sm rounded-pill btn-primary" style="padding:3px 15px;" onclick="activatePin();"> Kích hoạt </button>
                            <button class="btn btn-sm rounded-pill btn-primary" style="padding:3px 15px;" onclick="transferPin();"> Chuyển </button>
                        </div>
                    </div>
                    <div class="history" id="history-pin">
                        <div class="history-detail">
                            <div class="content">Bạn đã dùng 01 Vé để vào hàng chờ cho</div>
                            <div class="time"> 10/04/2023 16:22:00 </div>
                        </div>
                        <div class="history-detail">
                            <div class="content">Bạn nhận được 03 Vé</div>
                            <div class="time"> 10/04/2023 16:22:00 </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="modal" class="modal" onclick="closeModal()">
        <div class="modal-container">
            <div class="modal-header">Lệnh rút</div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="font-weight-semibold" for="withDraw">Số tiền bạn muốn rút</label>
                    <input type="text" class="form-control" id="withDraw" placeholder="Số tiền bạn muốn rút">
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-sm close-modal" onclick="closeModal()">Đóng</button>
                <button class="btn btn-sm btn-primary" onclick="CreateUserWithdrawOrder();">Lưu</button>

            </div>

        </div>

    </div>

    <div id="activatePinModal" class="modal" onclick="closeActivatePinModal()">
        <div class="modal-container">
            <div class="modal-header">Kích hoạt</div>
            <div class="modal-body products">
                <div class="product-label">Danh sách sản phẩm</div>
                <div class="list-product" id="list-product" style="display: flex; width: 100%; flex-wrap: wrap; gap: 7px; ">
                    <div class="product-detail selected" onclick="ProductSelect(this);">
                        <div class="product-img">
                            <div class="thumbnail"></div>
                        </div>
                        <div class="product-name">Sữa A </div>
                    </div>
                    <div class="product-detail" onclick="ProductSelect(this);">

                        <div class="product-img">
                            <div class="thumbnail"></div>
                        </div>
                        <div class="product-name"> Sữa B </div>
                    </div>
                    <div class="product-detail" onclick="ProductSelect(this);">

                        <div class="product-img">
                            <div class="thumbnail"></div>
                        </div>
                        <div class="product-name"> Sữa C </div>
                    </div>
                    <div class="product-detail" onclick="ProductSelect(this);">

                        <div class="product-img">
                            <div class="thumbnail"></div>
                        </div>
                        <div class="product-name"> Sữa D </div>
                    </div>
                </div>

            </div>

            <div class="modal-footer">
                <button class="btn btn-sm close-modal" onclick="closeActivatePinModal();">Đóng</button>
                <button class="btn btn-sm btn-primary" onclick="ActivatePinModal();">Lưu</button>
            </div>
        </div>
    </div>

    <div id="transferPinModal" class="modal" onclick="closeTransferPinModal()">
        <div class="modal-container">
            <div class="modal-header">Chuyển</div>
            <div class="modal-body">                
                <div class="form-group" style="display:block;position: relative;">
                    <input id="UserReceiveId" hidden />
                    <label class="font-weight-semibold" for="withDraw">Người nhận</label>
                    <input type="text" class="form-control" id="searchUser" placeholder="Tìm kiếm theo tài khoản hoặc email" onfocus="getListUser();" onkeyup="getListUser();" onfocusout="searchUser_focusOut();">
                    <ul id="list-user-receive">
                        <li>
                            <div class="user-receive">
                                <div><span>Bui Mai Linh</span></div>
                                <span class="user-content">Mai Linh - builinh@gmail.com</span>
                            </div>
                        </li>
                        <li>
                            <div class="user-receive">
                                <div><span>Bui Mai Linh</span></div>
                                <span class="user-content">Mai Linh - builinh@gmail.com</span>
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="form-group">
                    <label class="font-weight-semibold" for="withDraw">Số vé</label>
                    <input type="text" class="form-control" id="PinTransfer" placeholder="Số vé">
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-sm close-modal" onclick="closeTransferPinModal();">Đóng</button>
                <button class="btn btn-sm btn-primary" onclick="TransferPinModal();">Lưu</button>
            </div>
        </div>
    </div>
</section>

@section scripts{
    <script>
        const ProductSelect = function(el) {
            if(!$(el).hasClass('selected')) {
                $(el).siblings().removeClass('selected')
                $(el).addClass('selected');
            } 
        }

        const getListProduct = async function(){
            $('#list-product').html('');

            const rp = await fetch('/api/Product/GetListProduct', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                for (let index = 0; index < rs.data.length; index++) {
                    html += `<div class="product-detail" data-id="${rs.data[index].ProductId}" onclick="ProductSelect(this);"><div class="product-img"><div class="thumbnail" style="background-image:url(${rs.data[index].Thumbnail})"></div></div>`;
                    html += `<div class="product-name"> ${rs.data[index].Name} </div></div>`;                        
                }
                $('#list-product').append(html);
                console.log(rs);
            }
        }

        

        const getListWithdrawPending = async function () {
            $('#withdraw-pending').html('');

            const rp = await fetch('/api/UserWallet/GetListWithdrawPendingByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                html += '<div class="withdraw-label"> Lệnh rút </div>';
                for (let index = 0; index < rs.data.length; index++) {
                    html += '<div class="withdraw-detail">';
                    html += '<div class="detail-left">';
                    html += '<div class="withdraw-code">' + rs.data[index].Code + '</div>';
                    html += '<div class="withdraw-content">Bạn đã đặt lệnh rút ' + NumberFormat(rs.data[index].Amount) + ' VNĐ</div>';
                    html += '<div class="withdraw-time"> ' + DateStringFormat({ stringDate: new Date(rs.data[index].CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' }) + ' </div>';
                    html += '</div> <div class="detail-right">';
                    html += `<button class="btn btn-sm rounded-pill btn-danger" data-id="${rs.data[index].UserWithdrawOrderId}" onclick="UserCancelWithdraw(this);">Huỷ</button></div></div>`;                        
                }
                $('#withdraw-pending').append(html);

                console.log(rs);
            }
        }

        const getListUserTransaction = async function () {
            $('#history-balance').html('');
            const rp = await fetch('/api/UserTransaction/GetListUserTransactionByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                for (let index = 0; index < rs.data.length; index++) {
                    html += `<div class="history-detail"><div class="content">${ rs.data[index].Note} </div>`;
                    html += `<div class="time">${DateStringFormat({ stringDate: new Date(GetObjectProperty(rs.data[index],'CreateTime')), newFormat: 'dd/mm/yyyy hh:mi:ss' })}</div></div>`;
                }
                $('#history-balance').append(html);

            }
        }

        const getUserWallet = async function () {
            $('#wallet-balance').html('');
            $('#wallet-pin').html('');
            const rp = await fetch('/api/UserWallet/GetUserWalletByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                $('#wallet-balance').append(`${NumberFormat(GetObjectProperty(rs.data,'Balance'))} VNĐ`);
                $('#wallet-pin').append(`${NumberFormat(GetObjectProperty(rs.data,'Pin'))} Vé`);
            }
        }

        const getListPinTransfer = async function () {
            $('#history-pin').html('');
            const rp = await fetch('/api/UserPinTransfer/GetListPinTransferByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                for (let index = 0; index < rs.data.length; index++) {
                    html += `<div class="history-detail"><div class="content">${rs.data[index].Message}</div>`;
                    html += `<div class="time">${DateStringFormat({ stringDate: new Date(rs.data[index].CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' })}</div></div>`;
                }
                $('#history-pin').append(html);

                console.log(rs);
            }
        }

        const UserCancelWithdraw = async function (el) {
            if (confirm("Xác nhận hoàn thành lệnh rút của người dùng?")) {
                var id = $(el).data('id');
                console.log(id);
                const rp = await fetch('/api/UserWithdrawOrder/UserCancelWithdrawOrder?userWithdrawId=' + id, {
                    method: 'get',
                    headers: Enum.OptionHeaderDefault
                });
                let rs = await rp.json();
                if (CheckErrorResponse(rs) === false) return;
                if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
                if (rs.status === 'success') {
                    if (rs.message !== '' && rs.message !== null) alert(rs.message);
                    window.location.reload();
                }
            }
            
        }


        const openModal = function () {
            $('#modal').css('display', 'flex');
        }

        const closeModal = function () {
            $('#modal').css('display', 'none');
            $('#withDraw').val('');
        }

        const CreateUserWithdrawOrder = async function () {
            let model = {
                Amount: $('#withDraw').val()
            }
            const rp = await fetch('/api/UserWithdrawOrder/CreateUserWithdrawOrder', {
                method: 'post',
                headers: Enum.OptionHeaderDefault,
                body: JSON.stringify(model)
                
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error')
                if (rs.message !== '' && rs.message !== null) {
                    alert(rs.message);
                    window.location.reload();
                }
                    
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                window.location.reload();
            }
        }

        const activatePin = async function () {
            $('#activatePinModal').css('display', 'flex');
        }

        const closeActivatePinModal = function(){
            $('#activatePinModal').css('display', 'none');
            $('#list-product').find('.selected').removeClass('selected')
        }       
        
        const ActivatePinModal = async function(){
            var id = $('#list-product').find('.selected').data('id');
            console.log(id);
            const rp = await fetch('/api/UserPinTransfer/ActivatePin?productId=' + id, {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                window.location.reload();
            }
        } 

        const transferPin = function () {
            $('#transferPinModal').css('display', 'flex');
        }

        const closeTransferPinModal = function () {
            $('#transferPinModal').css('display', 'none'); 
            $('#PhoneTransfer').val('');
            $('#PinTransfer').val('');
            $('#list-user-receive').css('display', 'none');
        }

        const TransferPinModal = async function () {
            let model = {
                UserId: $('#UserReceiveId').val(),
                Pin: $('#PinTransfer').val()
            };

            if (GetObjectProperty(model, 'UserId') === '') { alert('Bạn chưa chọn người nhận.'); return; }
            if (GetObjectProperty(model, 'Pin') === '') { alert('Số pin không được để trống.'); return; }


            console.log(model);

            let rq = await fetch('/api/UserPinTransfer/TransferPin', {
                method: 'post',
                headers: Enum.OptionHeaderDefault,
                body: JSON.stringify(model)
            })
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) {
                return;
            }

            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                window.location.reload();
            }
        }


        const getListUser = async function () {
            $('#list-user-receive').css('display', 'block');
            $('#list-user-receive').html('');
            var keyword = $('#searchUser').val();
            let rq = await fetch('/api/User/GetListUser?keyword=' + keyword, {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            })
            let rs = await rq.json();
            if (CheckErrorResponse(rs) === false) {
                return;
            }
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                let html = '';
                for (let index = 0; index < rs.data.length; index++) {
                    html += `<li data-id="${rs.data[index].UserId}" data-name="${rs.data[index].Name}" onclick="getUser_onClick(this);"><div class="user-receive">`;
                    
                    html += `<div><span>${rs.data[index].Name} </span></div>`;
                    if (GetObjectProperty(rs.data[index], 'Account') || GetObjectProperty(rs.data[index], 'Email')) {
                        html += `<span class="user-content">${GetObjectProperty(rs.data[index], 'Account')}`;
                        if (GetObjectProperty(rs.data[index], 'Email'))
                        html += ` - ${GetObjectProperty(rs.data[index], 'Email')} </span>`;
                    }
                    html += `</div></li>`;
                    
                }
                $('#list-user-receive').append(html);
            }
        }

        const getUser_onClick = function (el) {
            var name = $(el).data('name');
            $('#searchUser').val(name);
            var id = $(el).data('id');
            $('#UserReceiveId').val(id);
            console.log(name);
            $('#list-user-receive').css('display', 'none');
        }

        const InitPage = async function () {
            await getUserWallet();
            await getListWithdrawPending();
            await getListUserTransaction();
            await getListPinTransfer();
            await getListProduct();

            $(".modal-container").click(function (event) {
                event.stopPropagation();
            });
        }

        InitPage();
    </script>
}
