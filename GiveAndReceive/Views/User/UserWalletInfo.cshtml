
@{
    ViewBag.Title = "Ví";
    ViewBag.Menu = "user";
    ViewBag.SubMenu = "wallet";
}

@section styles {
    <style>
        section {
            flex-direction: column;
        }

        .wallet-page ul li {
            width: 50%;
            text-align: center;
        }

        .card .card-body {
            padding: 1rem;
        }

        .modal {
            position: fixed;
            top: 0;
            right: 0;
            left: 0;
            bottom: 0;
            background: rgba(0,0,0,0.4);
            display: none;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .modal-container {
            background-color: #fff;
            width: 900px;
            max-width: calc(100% - 32px);
            position: relative;
            animation: modalFadeIn ease 0.5s;
            transition: top 0.4s, opacity 0.4s;
        }

        .modal-header {
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center !important;
            font-size: 20px;
            border-bottom: solid #ccc 0.5px;
            text-transform: uppercase;
        }

        .modal-body {
            width: 90%;
            margin: auto;
        }

        .modal-footer {
            width: 90%;
            margin: auto;
            justify-content: end;
            display: flex;
            gap: 10px;
            padding-bottom: 10px;
        }

            .modal-footer .close-modal {
                width: 65px;
                color: black;
                border: solid #ccc 0.5px;
                cursor: pointer;
                border-radius: 5px;
            }

        @@keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-200px);
            }

            to {
                transform: translateY(0px);
                opacity: 1;
            }
        }
    </style>
}

<section class="wallet-page">
    <div class="section-header">Ví</div>
    <div class="card">
        <div class="card-body">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link active" id="balance-tab" data-bs-toggle="tab" href="#balance"
                       role="tab" aria-controls="balance" aria-selected="true">Số dư</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link" id="pin-tab" data-bs-toggle="tab" href="#pin"
                       role="tab" aria-controls="profile" aria-selected="false">Vé</a>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="balance" role="tabpanel"
                     aria-labelledby="balance-tab">
                    <div class="balance-header">
                        <div class="wallet-balance" id="wallet-balance"> 12,000,000 VNĐ</div>
                        <div class="withdraw-button" style="text-align:right">
                            <button class="btn btn-sm rounded-pill btn-primary" style="padding:3px 15px;" onclick="openModal()"> Rút </button>
                        </div>
                    </div>
                    <div class="withdraw" id="withdraw-pending">
                    </div>
                    <div class="history" id="history-balance">
                    </div>
                </div>
                <div class="tab-pane fade" id="pin" role="tabpanel"
                     aria-labelledby="pin-tab">
                    <div class="balance-header">
                        <div class="wallet-balance" id="wallet-pin"> 3 Vé</div>
                    </div>
                    <div class="history" id="history-pin">
                        <div class="history-detail">
                            <div class="content">Bạn đã dùng 01 Vé để vào hàng chờ cho</div>
                            <div class="time"> 10/04/2023 16:22:00 </div>
                        </div>
                        <div class="history-detail">
                            <div class="content">Bạn nhận được 03 Vé</div>
                            <div class="time"> 10/04/2023 16:22:00 </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="modal" class="modal" onclick="closeModal()">
        <div class="modal-container">
            <div class="modal-header">Lệnh rút</div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="font-weight-semibold" for="withDraw">Số tiền bạn muốn rút</label>
                    <input type="text" class="form-control" id="withDraw" placeholder="Số tiền bạn muốn rút">
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-sm close-modal" onclick="closeModal()">Đóng</button>
                <button class="btn btn-sm btn-primary" onclick="">Lưu</button>

            </div>

        </div>

    </div>
</section>

@section scripts{
    <script>
        const getListWithdrawPending = async function () {
            $('#withdraw-pending').html('');

            const rp = await fetch('/api/UserWallet/GetListWithdrawPendingByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                html += '<div class="withdraw-label"> Lệnh rút </div>';
                for (let index = 0; index < rs.data.length; index++) {
                    html += '<div class="withdraw-detail">';
                    html += '<div class="detail-left">';
                    html += '<div class="withdraw-code">' + rs.data[index].Code + '</div>';
                    html += '<div class="withdraw-content">Bạn đã đặt lệnh rút ' + NumberFormat(rs.data[index].Amount) + ' VNĐ</div>';
                    html += '<div class="withdraw-time"> ' + DateStringFormat({ stringDate: new Date(rs.data[index].CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' }) + ' </div>';
                    html += '</div> <div class="detail-right">';
                    html += `<button class="btn btn-sm rounded-pill btn-danger" data-id="${rs.data[index].UserWithdrawOrderId}" onclick="UserCancelWithdraw(this);">Huỷ</button></div></div>`;                        
                }
                $('#withdraw-pending').append(html);

                console.log(rs);
            }
        }

        const getListUserTransaction = async function () {
            $('#history-balance').html('');
            const rp = await fetch('/api/UserTransaction/GetListUserTransactionByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                for (let index = 0; index < rs.data.length; index++) {
                    html += `<div class="history-detail"><div class="content">${rs.data[index].Note} </div>`;
                    html += `<div class="time">${DateStringFormat({ stringDate: new Date(rs.data[index].CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' })}</div></div>`;
                }
                $('#history-balance').append(html);

                console.log(rs);
            }
        }

        const getUserWallet = async function () {
            $('#wallet-balance').html('');
            $('#wallet-pin').html('');
            const rp = await fetch('/api/UserWallet/GetUserWalletByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                $('#wallet-balance').append(`${rs.data.Balance} VNĐ`);
                $('#wallet-pin').append(`${rs.data.Pin} Vé`);
            }
        }

        const getListPinTransfer = async function () {
            $('#history-pin').html('');
            const rp = await fetch('/api/UserPinTransfer/GetListPinTransferByUser', {
                method: 'get',
                headers: Enum.OptionHeaderDefault
            });
            let rs = await rp.json();
            if (CheckErrorResponse(rs) === false) return;
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                let html = '';
                for (let index = 0; index < rs.data.length; index++) {
                    html += `<div class="history-detail"><div class="content">${rs.data[index].Message}</div>`;
                    html += `<div class="time">${DateStringFormat({ stringDate: new Date(rs.data[index].CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' })}</div></div>`;
                }
                $('#history-pin').append(html);

                console.log(rs);
            }
        }

        const UserCancelWithdraw = async function (el) {
            if (confirm("Xác nhận hoàn thành lệnh rút của người dùng?")) {
                var id = $(el).data('id');
                console.log(id);
                const rp = await fetch('/api/UserWithdrawOrder/UserCancelWithdrawOrder?userWithdrawId=' + id, {
                    method: 'get',
                    headers: Enum.OptionHeaderDefault
                });
                let rs = await rp.json();
                if (CheckErrorResponse(rs) === false) return;
                if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
                if (rs.status === 'success') {
                    if (rs.message !== '' && rs.message !== null) alert(rs.message);
                    window.location.reload();
                }
            }
            
        }


        const openModal = function () {
            $('#modal').css('display', 'flex');
        }

        const closeModal = function () {
            $('#modal').css('display', 'none');
            $('#withDraw').val('');
        }

        const InitPage = async function () {
            await getUserWallet();
            await getListWithdrawPending();
            await getListUserTransaction();
            await getListPinTransfer();

            $(".modal-container").click(function (event) {
                event.stopPropagation();
            });
        }

        InitPage();
    </script>
}
