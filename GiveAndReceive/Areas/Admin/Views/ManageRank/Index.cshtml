
@{
    ViewBag.Title = "Quản lý hạng";
    ViewBag.Menu = "manage-rank";
}

@section styles{
    <style>
        .main-content {
            padding: 10px 10px 10px 10px !important;
        }

        .btn-custom-color {
            color: white;
            background-color: #8c237b;
            float: right;
        }


        #tab-bank-account {
            background-color: white;
            padding: 30px;
            margin-top: 20px;
            border-radius: 10px;
            min-height: 210px;
        }

            #tab-bank-account .create-bank-btn {
                padding: 10px 30px;
                border: solid #9c9c9c 0.5px;
                border-radius: 10px;
                font-size: 16px;
                font-weight: 500;
                cursor: pointer;
            }

            #tab-bank-account .list-bank-account {
                margin-top: 30px;
            }

        .list-bank-account td a {
            padding-right: 10px;
            cursor: pointer;
        }

        .list-bank-account .isDefault {
            padding: 3px;
            background-color: #31c6ff;
            color: white;
            width: fit-content;
            border-radius: 5px;
            font-size: 10px;
        }

        .modal {
            position: fixed;
            top: 0;
            right: 0;
            left: 0;
            bottom: 0;
            background: rgba(0,0,0,0.4);
            display: none;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .modal-container {
            background-color: #fff;
            width: 900px;
            max-width: calc(100% - 32px);
            min-height: 400px;
            position: relative;
            animation: modalFadeIn ease 0.5s;
            transition: top 0.4s, opacity 0.4s;
        }

        .modal-header {
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center !important;
            font-size: 20px;
            border-bottom: solid #ccc 0.5px;
            text-transform: uppercase;
        }

        .modal-body {
            width: 90%;
            margin: auto;
        }

        .modal-footer {
            width: 90%;
            margin: auto;
            justify-content: end;
            display: flex;
            gap: 10px;
            padding-bottom: 10px;
        }

            .modal-footer .update-btn {
                width: 100px;
                padding: 5px 5px;
                background-color: #435ebe;
                color: white;
                border-radius: 5px;
                cursor: pointer;
                border: solid #435ebe 1px;
            }

            .modal-footer .close-modal {
                width: 80px;
                color: black;
                border: solid #ccc 0.5px;
                cursor: pointer;
                border-radius: 5px;
            }

        @@keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-200px);
            }

            to {
                transform: translateY(0px);
                opacity: 1;
            }
        }
    </style>
}



<div class="main-content">
    <div class="">
        <div class="tab-content m-t-15">
            <div class="tab-pane fade show active" id="tab-bank-account">
                <div class="create-bank">
                    <a onclick="openCreateModal();" class="create-bank-btn">Tạo mới</a>
                </div>
                <div class="list-bank-account">
                    <div class="table-responsive desktop">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">Tên hạng</th>
                                    <th scope="col">Số vé tối đa</th>
                                    <th scope="col">Phần trăm hoa hồng</th>
                                    <th scope="col">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="list-rank">
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>

</div>


<div id="modal" class="modal" onclick="closeModal()">
    <div class="modal-container">
        <div class="modal-header">Cập nhật thông tin</div>
        <div class="modal-body">
            <div class="form-group">
                <label class="font-weight-semibold" for="rankName">Tên hạng</label>
                <input type="text" class="form-control" id="rankName" placeholder="Tên hạng">
            </div>

            <div class="form-group">
                <label class="font-weight-semibold" for="maxPin">Số vé tối đa</label>
                <input type="text" class="form-control" id="maxPin" placeholder="Số vé tối đa" onkeyup="ValidateInputOnlyNumber(event,this)">
            </div>

            <div class="form-group">
                <label class="font-weight-semibold" for="comPercent">Phần trăm hoa hồng</label>
                <div class="input-group">
                    <input type="text" min=0 class="form-control" id="comPercent" placeholder="Phần trăm hoa hồng" onkeyup="ValidateInputOnlyNumber(event,this)">
                    <span class="input-group-text">%</span>
                </div>
            </div>
            <input type="text" id="rankId" value="" style="display:none" />
        </div>

        <div class="modal-footer">
            <button class="close-modal" onclick="closeModal()">Đóng</button>
            <button class="update-btn" data-id="0" id="updateRank-btn">Lưu</button>
        </div>

    </div>
</div>

@section scripts{
    <script src="/Content/assets/vendors/toastify/toastify.js"></script>
    <script src="/Content/assets/vendors/sweetalert2/sweetalert2.all.min.js"></script>

    <script>
        const openCreateModal = function () {
            $('#updateRank-btn').attr('onclick', 'createRank()');
            $('#modal').css('display', 'flex');
        }

        const openUpdateModal = async function (el) {
            const id = $(el).data('id');
            $('#userBankInfoId').val(id);

            let rq = await fetch(Enum.ApiUrl + '/api/AdminRank/GetRankByRankId?RankId=' + id, {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                $('#rankName').val(rs.data.Name);
                $('#maxPin').val(rs.data.MaximumPinLimit);
                $('#comPercent').val(rs.data.CommissionPercent);
                $('#updateRank-btn').attr('onclick', 'updateRank()');
                $('#updateRank-btn').attr('data-id', id);

                $('#modal').css('display', 'flex');
            }
        }

        const closeModal = function () {
            $('#modal').css('display', 'none');
            $('#bankName').val('');
            $('#nameOwner').val('');
            $('#bankNum').val('');
            $("#bank-default").prop("checked", false);
        }

        const getRankInfo = async function () {
            let rq = await fetch(Enum.ApiUrl + '/api/AdminRank/GetListAllRank', {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault
            });
            let rs = await rq.json();
            $('#list-rank').html('');
            $('#list-bank-mobile').html('');
            if (AdminCheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                for (let index = 0; index < rs.data.length; index++) {
                    var x = rs.data[index]
                    let html = '<tr>';
                    if (x.IsDefault === true) {
                        html += '<td> ' + x.Name + '<p class="isDefault">Tài khoản mặc định</p> </td>';
                    } else {
                        html += '<td> ' + x.Name + ' </td>';
                    }
                    html += '<td>' + x.MaximumPinLimit + '</td>';
                    html += '<td>' + x.CommissionPercent + '</td>';
                    html += '<td>';
                    html += '<a data-id="' + x.RankId + '" onclick="openUpdateModal(this);"><button class="btn btn-primary"><i class="fa-solid fa-pen-to-square"></i></button></a>';
                    html += '<a data-id="' + x.RankId + '" onclick="deleteBankAccount(this);"><button class="btn btn-danger"><i class="fa fa-trash" aria-hidden="true"></i></button></a> </td> </tr>';

                    $('#list-rank').append(html);

                    let html2 = '<tr>';
                    html2 += '<td> <div>' + x.BankName + '</div>';
                    html2 += '<div style="background-color:#eee">' + x.BankOwnerName + '</div>';
                    html2 += '<div>' + x.BankAccountNumber + '</span></div>';
                    if (x.IsDefault === true) {
                        html2 += '<div><p class="isDefault" > Tài khoản mặc định</p ></span></div></td>';
                    } else {
                        html2 += '</td>';
                    }

                    html2 += '<td><a data-id="' + x.UserBankInfoId + '" onclick="openUpdateModal(this);"><button class="btn btn-primary btn-sm"><i class="fa-solid fa-pen-to-square"></i></button></a>';
                    html2 += '<a data-id="' + x.UserBankInfoId + '" onclick="deleteBankAccount(this);"><button class="btn btn-danger btn-sm"><i class="fa fa-trash" aria-hidden="true"></i></button></a> </td> </tr>';

                    $('#list-bank-mobile').append(html2);
                }
            }
        }

        const createRank = async function () {
            let model = {
                Name: $('#rankName').val(),
                CommissionPercent: $('#comPercent').val(),
                MaximumPinLimit: $('#maxPin').val(),
            }
            if (model.Name === '' || model.CommissionPercent === '' || model.MaximumPinLimit === '') {
                Swal.fire({
                    icon: "error",
                    title: "Vui lòng nhập đầy đủ thông tin",
                });
                return;
            }
            let rq = await fetch(Enum.ApiUrl + '/api/AdminRank/AdminCreateRank', {
                method: 'post',
                headers: Enum.OptionAdminHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                Swal.fire({
                    icon: "success",
                    title: "Tạo thông tin hạng thành công",
                    preConfirm: function () { window.location.reload() },
                });
            }
        }

        const updateRank = async function (el) {
            let id = $('#updateRank-btn').data('id');
            let model = {
                RankId:id,
                Name: $('#rankName').val(),
                CommissionPercent: $('#comPercent').val(),
                MaximumPinLimit: $('#maxPin').val(),
            }
            if (model.Name === '' || model.CommissionPercent === '' || model.MaximumPinLimit === '') {
                Swal.fire({
                    icon: "error",
                    title: "Vui lòng nhập đầy đủ thông tin",
                });
                return;
            }
            let rq = await fetch(Enum.ApiUrl + '/api/AdminRank/AdminUpdateRank', {
                method: 'post',
                headers: Enum.OptionAdminHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rq.json();

            if (AdminCheckErrorResponse(rs) === false) return;
            if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                Swal.fire({
                    icon: "success",
                    title: "Cập nhật thông tin hạng thành công",
                    preConfirm: function () { window.location.reload() },
                })
            }
        }


        const deleteBankAccount = async function (el) {
            const id = $(el).data('id');
            Swal.fire({
                icon: "question",
                title: "Bạn có chắc muốn xoá hạng này?",
                showCancelButton: true,
                preConfirm: async function () {
                    let rq = await fetch(Enum.ApiUrl + '/api/AdminRank/AdminDeleteRank?rankId=' + id, {
                        method: 'get',
                        headers: Enum.OptionAdminHeaderDefault
                    });
                    let rs = await rq.json();
                    if (AdminCheckErrorResponse(rs) === false) return;
                    if (GetObjectProperty(rs, 'status') === Enum.ResponseStatus.SUCCESS) {
                        Swal.fire({
                            icon: "success",
                            title: "Xoá hạng thành công",
                            preConfirm: function () { window.location.reload() },
                        })
                    }
                },
                didClose: function () {
                    return;
                }
            })
        }

        const initPage = async function () {
            await getRankInfo();
        }
        $(".modal-container").click(function (event) {
            event.stopPropagation();
        });

        initPage();
    </script>
}