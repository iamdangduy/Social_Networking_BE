
@{
    ViewBag.Title = "Quản lý lệnh rút";
    ViewBag.Menu = "manage-withdraw";
}

@section styles{
    <style>
        .list-data {
            margin-top: 20px;
            background-color: white;
            padding: 20px;
        }

        .search-keyword {
            flex: 1;
        }

        .search-tab-3 {
            display: flex;
            align-items: center;
            margin-left: 10px;
        }

        .list-data .thumnail {
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            width: 100px;
            height: 100px;
            border-radius: 10px;
        }

        .product-page.active {
            background-color: #3f87f5;
            color: white !important;
        }

        .product-page-list .product-page {
            cursor: pointer;
        }

            .product-page-list .product-page:hover {
                color: black !important;
            }

        td button {
            margin-right: 5px;
        }

        tr .name {
            display: flex;
            flex-direction: column;
        }

        tr .bankInfo {
            display: flex;
            flex-direction: column;
            font-size: 14px;
        }
    </style>
}
<div class="list-option" style="width:50%;display:flex">
    <div class="search-keyword" id="email-form">
        <input type="text" class="form-control" id="keyword" placeholder="Nhập từ khoá tìm kiếm" required="">
    </div>
    <div class="search-tab-3"><a onclick="getListUserWithdrawalOrder();" class="btn btn-primary">Tìm kiếm</a></div>
</div>
<div class="list-data">
    <table class="table table-hover">
        <thead>
            <tr>
                <th id="Name">Người dùng</th>
                <th style="width:200px;">Thông tin ngân hàng</th>
                <th style="width:250px;text-align:center;">Số tiền (VNĐ)</th>
                <th>Ngày tạo</th>
                <th>Trạng thái</th>
                <th id="Tablebutton" style="width:200px;">Thao tác</th>
            </tr>
        </thead>
        <tbody id="listuserWithdrawalOrder">
        </tbody>
    </table>
    <div class="product-page-list">
    </div>
</div>

<div id="modal" class="modal" onclick="closeModal()">
    <div class="modal-container">
        <div class="modal-header">
            Yêu cầu rút tiền
            <i class="fa-solid fa-xmark modal-close" onclick="closeModal()"></i>
        </div>
        <div class="modal-body">
            <div style="display:flex">
                <div class="modal-label">Tên chủ tài khoản:</div>
                <div class="modal-value"></div>
            </div>
            <div style="display:flex">
                <div class="modal-label">Ngân hàng:</div>
                <div class="modal-value"></div>
            </div>

            <div style="display:flex">
                <div class="modal-label">Số tài khoản:</div>
                <div class="modal-value" title="Copy" style="cursor: pointer; background-color: #e8e8e8;padding:5px"></div>
            </div>
            <div style="display:flex">
                <div class="modal-label">Số tiền</div>
                <div class="modal-value" id="priceModal"></div>
            </div>
            <div style="display:flex">
                <div class="modal-label">Code</div>
                <div class="modal-value" id="codeModal"></div>
            </div>
        </div>
        <input type="hidden" id="UserWithdrawOrderId" />

        <div class="modal-footer">

        </div>

    </div>

</div>

@section scripts{
    <script>

        const getListUserWithdrawalOrder = async function (el) {
            $('#listuserWithdrawalOrder').html('');
            $('.product-page-list').html('');
            let page = $(el).data('page');
            if (el === undefined) {
                page = 1;
            }
            let keyword = $('#keyword').val();
            const rp = await fetch('/api/AdminUserWithDrawOrder/GetListUserDrawOrder?pageIndex=' + page + '&pageSearch=' + keyword, {
                method: 'get',
                headers: Enum.OptionAdminHeaderDefault
            });
            let rs = await rp.json();
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                for (let index = 0; index < rs.data.ListData.length; index++) {
                    let i = rs.data.ListData[index];
                    let html = '<tr>';
                    html += '<td><div class="name"><span>' + i.Name + '</span> <span>[' + i.Code + ']</span></div></td>';
                    html += '<td><div class="bankInfo"><span>' + GetObjectProperty(i, 'BankName') + '</span> <span>' + GetObjectProperty(i, 'BankAccountNumber') + '</span> <span>' + GetObjectProperty(i,'BankOwnerName') + '</span></div></td>';
                    html += '<td style="text-align:center">' + NumberFormat(GetObjectProperty(i, 'Amount')) + '</td>';
                    html += '<td>' + DateStringFormat({ stringDate: new Date(i.CreateTime), newFormat: 'dd/mm/yyyy hh:mi:ss' }) + '</td>';
                    let button = '';
                    let status = '';
                    switch (i.Status) {
                        case 'PENDING':
                            status = '<span class="badge bg-light-warning"> Chờ xác nhận </span>';
                            button = '<button class="btn btn-primary btn-tone m-r-5 btn-sm" onclick="ConfirmWithdrawalOrder(this)" data-id="' + i.UserWithdrawOrderId + '"> Xác nhận </button>';
                            button += '<button class="btn btn-danger btn-tone m-r-5 btn-sm" onclick="ChangeOrderStatusToSystemCancel(this)" data-id="' + i.UserWithdrawOrderId + '"> Huỷ </button>';
                            break;
                        case 'PROCESSING':
                            status = '<span class="badge bg-light-info">Đang xử lý</span>';
                            button = '<button class="btn btn-primary btn-tone m-r-5 btn-sm" onclick="ChangeOrderStatusToDone(this)" data-id="' + i.UserWithdrawOrderId + '"> Xác nhận đã hoàn thành </button>';
                            break;
                        case 'DONE':
                            status = '<span class="badge bg-light-success">Đã hoàn thành</span>';
                            break;
                        case 'USER_CANCEL':
                            status = '<span class="badge bg-light-danger">Người dùng hủy</span>';
                            break;
                        case 'SYSTEM_CANCEL':
                            status = '<span class="badge bg-light-danger">Hệ thống hủy</span>';
                            break;

                        default:
                            break;
                    }
                    html += '<td>' + status + '</td>';
                    html += '<td>' + button + '</td>';
                    html += '</tr>';

                    $('#listuserWithdrawalOrder').append(html);

                }
                for (let _page = 1; _page <= rs.data.TotalPage; _page++) {
                    if (_page === page) {
                        $('.product-page-list').append('<a onclick="getListUserWithdrawalOrder(this);" data-page="' + _page + '" class="product-page active">' + _page + '</a>')
                    } else {
                        $('.product-page-list').append('<a onclick="getListUserWithdrawalOrder(this);" data-page="' + _page + '" class="product-page">' + _page + '</a>')
                    }
                }
            }
        }
        const ConfirmWithdrawalOrder = async function (el) {
            if (confirm("Xác nhận cho yêu cầu rút này")) {
                let id = $(el).data('id');
                const rp = await fetch('/api/AdminUserWithDrawOrder/ChangeOrderStatusToProcessing?UserWithdrawOrderId=' + id, {
                    method: 'get',
                    headers: Enum.OptionAdminHeaderDefault
                });
                let rs = await rp.json();
                if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
                if (rs.status === 'success') {
                    if (rs.message !== '' && rs.message !== null) alert(rs.message);
                    window.location.reload();
                }
            }
        }

        const ChangeOrderStatusToDone = async function (el) {
            if (confirm("Xác nhận hoàn thành lệnh rút của người dùng?")) {
                let id = $(el).data('id');
                const rp = await fetch('/api/AdminUserWithDrawOrder/ChangeOrderStatusToDone?UserWithdrawOrderId=' + id, {
                    method: 'get',
                    headers: Enum.OptionAdminHeaderDefault
                });
                let rs = await rp.json();
                if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
                if (rs.status === 'success') {
                    if (rs.message !== '' && rs.message !== null) alert(rs.message);
                    window.location.reload();
                }
            }
        }
        const ChangeOrderStatusToSystemCancel = async function (el) {

            let model = {
                UserWithdrawOrderId: $(el).data('id'),

            }
            const rp = await fetch('/api/AdminUserWithDrawOrder/ChangeOrderStatusToSystemCancel', {
                method: 'post',
                headers: Enum.OptionAdminHeaderDefault,
                body: JSON.stringify(model)
            });
            let rs = await rp.json();
            if (rs.status === 'error') if (rs.message !== '' && rs.message !== null) alert(rs.message);
            if (rs.status === 'success') {
                if (rs.message !== '' && rs.message !== null) alert(rs.message);
                alert("Hủy thành công!");
                window.location.reload();
            }

        }

        const InitPage = async function () {
            await getListUserWithdrawalOrder();
            $(".modal-container").click(function (event) {
                event.stopPropagation();
            });
        }

        InitPage();
    </script>
}

